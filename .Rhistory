library(washr)
setup_rawdata()
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(readxl)
library(openxlsx)
# Read data --------------------------------------------------------------------
data_in <- readr::read_csv("data-raw/drilling survey.csv")
nrow(data_in)
null_rows <- sum(!complete.cases(data_in))
# Read data --------------------------------------------------------------------
data_in <- readr::read_csv("data-raw/drilling survey.csv")
nrow(data_in)
null_rows <- sum(!complete.cases(data_in))
null_rows
#remove all rows that have gps location null
null_lat <- sum(is.na(data_in$latitude)))
#remove all rows that have gps location null
null_lat <- sum(is.na(data_in$latitude))
null_lat
#remove all rows that have gps location null
data_in[] <- data_in %>%
filter(!is.na(latitude))
nrow(data_in)
#remove all rows that have gps location null
data_in[] <- data_in %>%
filter(!is.na(latitude))
#remove all rows that have gps location null
da <- data_in %>%
filter(!is.na(latitude))
nrow(data_in)
nrow(da)
#remove all rows that have gps location null
da <- data_in %>%
filter(!is.na(latitude))
nrow(da)
# Read data --------------------------------------------------------------------
drilling_survey <- readr::read_csv("data-raw/drilling survey.csv")
nrow(drilling_survey)
#remove all rows that have gps location null
drilling_survey_clean <- drilling_survey %>%
filter(!is.na(latitude))
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(dplyr)
library(readxl)
library(openxlsx)
# Read data --------------------------------------------------------------------
drilling_survey <- readr::read_csv("data-raw/drilling survey.csv")
nrow(drilling_survey)
#remove all rows that have gps location null
drilling_survey_clean <- drilling_survey %>%
filter(!is.na(latitude))
drilling_survey_clean
nrows(drilling_survey_clean)
sum(drilling_survey_clean)
num_rows <- nrow(drilling_survey_clean)
num_rows
# Read data --------------------------------------------------------------------
drilling_survey <- readr::read_csv("data-raw/drilling survey.csv")
nrow(drilling_survey)
#remove all rows that have gps location null
drilling_survey_clean <- drilling_survey %>%
filter(!is.na(latitude))
num_rows <- nrow(drilling_survey_clean)
num_rows
head(drilling_survey_clean)
tail(drilling_survey_clean)
library(usethis)
library(fs)
library(here)
library(readr)
library(dplyr)
library(readxl)
library(openxlsx)
# Read data --------------------------------------------------------------------
data_in <- readr::read_csv("data-raw/drilling survey.csv")
# codebook <- readxl::read_excel("data-raw/codebook.xlsx") |>
#  clean_names()
# remove all null rows based on the GPS location (latitude)
data_in[] <- data_in %>%
filter(!is.na(latitude))
# Read data --------------------------------------------------------------------
data_in <- readr::read_csv("data-raw/drilling survey.csv")
data_in <- data_in %>%
filter(!is.na(latitude))
# Function to check for non-UTF-8 characters
check_utf8 <- function(df) {
invalid_cols <- sapply(df, function(column) {
if (!is.character(column)) return(FALSE) # Only check character columns
any(sapply(column, function(x) {
if (is.na(x)) return(FALSE) # Ignore NA values
!identical(iconv(x, from = "UTF-8", to = "UTF-8"), x)
}))
})
bad_cols <- names(df)[invalid_cols]
if (length(bad_cols) > 0) {
message("Non-UTF-8 characters detected in columns: ", paste(bad_cols, collapse = ", "))
} else {
message("No non-UTF-8 characters found.")
}
}
# Check and Fix Encoding
check_utf8(data_in)
data_in[] <- lapply(data_in, function(x) {
if (is.character(x)) {
iconv(x, from = "latin1", to = "UTF-8", sub = "")  # Convert to UTF-8 and remove problematic characters
} else {
x
}
})
# Re-check encoding after conversion
check_utf8(data_in)
nrows <- nrow(data_in)
nrows
# Re-check the data for non-UTF-8 characters after the conversion
check_utf8(data_in)
# Convert 'date_of_drilling' column to Date type (assuming it's in m/d/y format)
data_in <- data_in %>%
mutate(date_of_drilling = mdy(date_of_drilling))  # mdy converts from month/day/year to Date type
library(usethis)
library(fs)
library(here)
library(readr)
library(dplyr)
library(readxl)
library(openxlsx)
library(lubridate)
# Load the necessary data from a CSV file
data_in <- readr::read_csv("data-raw/drilling survey.csv")
# (Optional) Read and clean the codebook if needed (commented out for now)
# codebook <- readxl::read_excel("data-raw/codebook.xlsx") %>%
#   clean_names()
# Remove rows where the 'latitude' column contains NULL (NA) values
data_in <- data_in %>%
filter(!is.na(latitude))
# Function to check for non-UTF-8 characters in character columns
check_utf8 <- function(df) {
# Identify columns with invalid UTF-8 characters
invalid_cols <- sapply(df, function(column) {
if (!is.character(column)) return(FALSE) # Skip non-character columns
any(sapply(column, function(x) {
if (is.na(x)) return(FALSE) # Ignore NA values
!identical(iconv(x, from = "UTF-8", to = "UTF-8"), x)  # Check if conversion is needed
}))
})
# Extract the column names with invalid characters
bad_cols <- names(df)[invalid_cols]
# Output a message depending on whether non-UTF-8 characters were found
if (length(bad_cols) > 0) {
message("Non-UTF-8 characters detected in columns: ", paste(bad_cols, collapse = ", "))
} else {
message("No non-UTF-8 characters found.")
}
}
# Check the data for non-UTF-8 characters before conversion
check_utf8(data_in)
# Convert character columns from Latin1 encoding to UTF-8, removing problematic characters
data_in[] <- lapply(data_in, function(x) {
if (is.character(x)) {
iconv(x, from = "latin1", to = "UTF-8", sub = "")  # Convert to UTF-8 and remove problematic characters
} else {
x
}
})
# Re-check the data for non-UTF-8 characters after the conversion
check_utf8(data_in)
# Convert 'date_of_drilling' column to Date type (assuming it's in m/d/y format)
data_in <- data_in %>%
mutate(date_of_drilling = mdy(date_of_drilling))  # mdy converts from month/day/year to Date type
# Reformat the date to d/m/y format (character format)
data_in <- data_in %>%
mutate(date_of_drilling = format(date_of_drilling, "%d/%m/%Y"))
# Check the updated date format
head(data_in$date_of_drilling)
# Convert 'date_of_drilling' column to Date type (assuming it's in m/d/y format)
data_in <- data_in %>%
# mdy converts from month/day/year to Date type
mutate(date_of_drilling = mdy(date_of_drilling))
# Reformat the date to d/m/y format (character format)
data_in <- data_in %>%
mutate(date_of_drilling = format(date_of_drilling, "%d/%m/%Y"))
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(dplyr)
library(readxl)
library(openxlsx)
library(lubridate)
# Load Data --------------------------------------------------------------------
# Load the necessary data from a CSV file
data_in <- readr::read_csv("data-raw/drilling survey.csv")
# (Optional) Read and clean the codebook if needed (commented out for now)
# codebook <- readxl::read_excel("data-raw/codebook.xlsx") %>%
#   clean_names()
# Tidy data --------------------------------------------------------------------
# Remove rows where the 'latitude' column contains NULL (NA) values
data_in <- data_in %>%
filter(!is.na(latitude))
# Function to check for non-UTF-8 characters in character columns
check_utf8 <- function(df) {
# Identify columns with invalid UTF-8 characters
invalid_cols <- sapply(df, function(column) {
if (!is.character(column)) return(FALSE) # Skip non-character columns
any(sapply(column, function(x) {
if (is.na(x)) return(FALSE) # Ignore NA values
!identical(iconv(x, from = "UTF-8", to = "UTF-8"), x)
}))
})
# Extract the column names with invalid characters
bad_cols <- names(df)[invalid_cols]
# Output a message depending on whether non-UTF-8 characters were found
if (length(bad_cols) > 0) {
message("Non-UTF-8 characters detected in columns: ",
paste(bad_cols, collapse = ", "))
} else {
message("No non-UTF-8 characters found.")
}
}
# Check the data for non-UTF-8 characters before conversion
check_utf8(data_in)
# Convert character columns from Latin1 encoding to UTF-8, removing problematic
#   characters
data_in[] <- lapply(data_in, function(x) {
if (is.character(x)) {
# Convert to UTF-8 and remove problematic characters
iconv(x, from = "latin1", to = "UTF-8", sub = "")
} else {
x
}
})
# Re-check the data for non-UTF-8 characters after the conversion
check_utf8(data_in)
# Convert 'date_of_drilling' column to Date type (assuming it's in m/d/y format)
data_in <- data_in %>%
mutate(date_of_drilling = mdy(date_of_drilling))
# Reformat the date to d/m/y format (character format)
data_in <- data_in %>%
mutate(date_of_drilling = format(date_of_drilling, "%d/%m/%Y"))
# Assign data to a variable
drillingdata <- data_in
# Export Data ------------------------------------------------------------------
usethis::use_data(drillingdata, overwrite = TRUE)
fs::dir_create(here::here("inst", "extdata"))
readr::write_csv(drillingdata,
here::here("inst", "extdata", paste0("drillingdata", ".csv")))
openxlsx::write.xlsx(drillingdata,
here::here("inst", "extdata", paste0("drillingdata",
".xlsx")))
setup_dictionary()
setup_roxygen()
devtools::document()
devtools::check()
devtools::install()
use_author(
given = "Emmanuel",
family = "Mhango",
role = c("aut", "cre"),
email = "emmanuellmhango@gmail.com",
comment = c(ORCID = "0000-0003-3197-6244")
)
use_author(given = "Jamie", family = "Rattray", role = "aut")
use_author(given = "Shaun", family = "MacLeod", role = "aut")
use_author(given = "Given", family = "Nyasulu", role = "aut")
use_author(given = "Temwani", family = "Chisunkha", role = "aut")
use_author(given = "Gloria", family = "Musopole", role = "aut")
use_author(given = "Agnes", family = "Hamis", role = "aut")
use_author(given = "Feston", family = "Bwanyula", role = "aut")
update_description()
devtools::document()
devtools::check()
devtools::install()
add_metadata()
install.packages("dataspice")
library(dataspice)
add_metadata()
